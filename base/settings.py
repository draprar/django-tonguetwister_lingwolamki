"""
Django settings for base project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
import environ
import sentry_sdk

# Load environment variables from .env file

env = environ.Env(
    DEBUG=(bool, False),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com', 'www.lingwolamki.online', 'lingwolamki.online']

CSRF_TRUSTED_ORIGINS = ['https://www.lingwolamki.online', 'https://lingwolamki.online']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'tonguetwister.apps.TongueTwisterConfig',  # load app using its custom configuration class
    'rest_framework',
    'corsheaders',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'base.middleware.LoginStreakMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

# Allow CORS - all domains (ðŸ”´ not a good idea in production)
CORS_ALLOW_ALL_ORIGINS = True

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env("REDIS_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SSL_CERT_REQS": None,
        }
    }
}

# REST API Configuration
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'tonguetwister.throttling.CustomAnonThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '50/hour',
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # JSON
        'rest_framework.renderers.BrowsableAPIRenderer' # UI
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Sentry settings
sentry_sdk.init(
    dsn=env("SENTRY_DSN"),
    traces_sample_rate=1.0, # error logging rate, e.g. 1.0 (100%)
    send_default_pii=False, # use user data
)

# Logs handling
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'requests.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# URL configuration root
ROOT_URLCONF = 'base.urls'

# Template engine settings
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'tonguetwister' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application for deployment

WSGI_APPLICATION = 'base.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql' if env.bool("USE_MYSQL", default=False) else 'django.db.backends.sqlite3',
        'NAME': env.str("DB_NAME") if env.bool("USE_MYSQL", default=False) else BASE_DIR / 'db.sqlite3',
        'USER': env.str("DB_USER", default="") if env.bool("USE_MYSQL", default=False) else '',
        'PASSWORD': env.str("DB_PASSWORD", default="") if env.bool("USE_MYSQL", default=False) else '',
        'HOST': env.str("DB_HOST", default="") if env.bool("USE_MYSQL", default=False) else '',
        'PORT': env.str("DB_PORT", default="") if env.bool("USE_MYSQL", default=False) else '',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        } if env.bool("USE_MYSQL", default=False) else {},
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Login/Logout settings

LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = 'main'
LOGOUT_REDIRECT_URL = 'main'

# Internationalization and timezone settings
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'pl-pl'
TIME_ZONE = 'Europe/Warsaw'
USE_I18N = True
USE_TZ = True


# Static and media files settings
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_USE_FINDERS = True
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email backend settings (using SMTP)

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')  # email server hostname
EMAIL_PORT = env.int('EMAIL_PORT')  # email server port
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')  # use TLS for secure connections
EMAIL_HOST_USER = env('EMAIL_HOST_USER')  # sender email address
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')  # sender email password
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')  # default sender email

# Security & Session settings
'''
if not DEBUG:
    SESSION_COOKIE_AGE = 1200  # session expiry time in seconds
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # expire session on browser close
    SECURE_HSTS_SECONDS = 31536000  # enforce HTTPS for one year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True  # redirect all HTTP traffic to HTTPS
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
'''